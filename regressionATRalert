### setiing a chart to give an alert signal
# when price hits the lower band of the Regression Channel
# If the opening chart price is lower than the current center regression line 
# (ie., suggesting bullish)


# Like this: AddLabel(1, Concat(“Long SL =", LL), Color.Cyan);

# ATR lower indicator 
 #compares the daily ATR divided by 92 (23 hours of trading, therefore 92 15-minute increments on the 15 min chart)
 # with another line of the current ATR on the current 15 minute chart



def averageTypeATR = AverageType.WILDERS;
def dayATR = MovingAverage(averageTypeATR, TrueRange(high(period = AggregationPeriod.Day), close(period = AggregationPeriod.Day), low(period = AggregationPeriod.Day)), 14);
AddLabel(1, Concat(“Day ATR", dayATR), Color.Cyan);

# ATR now vs ATR 2 hours ago on the 15 minute chart

declare lower;

def averageTypeATR = AverageType.WILDERS;
def dayATRF = MovingAverage(averageTypeATR, TrueRange(high(period = AggregationPeriod.Day), close(period = AggregationPeriod.Day), low(period = AggregationPeriod.Day)), 14);


plot dayATR =MovingAverage(averageTypeATR, TrueRange(high[92], close[92], low[92]), 14);

plot myATRu = MovingAverage(averageTypeATR, TrueRange(high, close, low), 14);
myATRu.SetDefaultColor(GetColor(4));  
dayATR.SetDefaultColor(GetColor(8));


# gives you the closing price of the first bar on the chart
def bn = BarNumber();
def here = getValue(close, bn-1);
AddLabel(1, Concat("CurrentBar#",  here), Color.Cyan);


### Below, the complete alert and System in one chart:

#2am Anchored VWAP
declare hide_on_daily;



def anchorTime = 0200;
def anchorEnd = 1600;
def ShowTodayOnly = yes;
def Today = if GetDay() == GetLastDay() then 1 else 0;
def postAnchorTime = if SecondsFromTime(anchorTime) >= 0 then 1 else 0;
def endAchorTime = if SecondsTillTime(anchorEnd) >= 0 then 1 else 0;

#plot anchorVWAP for intraday
def  volumeSum = compoundValue(1, if postAnchorTime and endAchorTime then volumeSum[1] + volume else 0, volume);
def  volumeVwapSum = compoundValue(1, if postAnchorTime and endAchorTime then volumeVwapSum[1] + volume * vwap else 0, volume * vwap);
 
plot anchorVWAP = if ShowTodayOnly and !Today then Double.NaN else if anchorTime then volumeVwapSum / volumeSum else Double.NaN;
anchorVWAP.setStyle(Curve.Firm);
anchorVWAP.setDefaultColor(Color.cyan);
anchorVWAP.setlineWeight(3);

#AVWAP for 7am
def anchorTime7 = 0700;
def postAnchorTime7 = if SecondsFromTime(anchorTime7) >= 0 then 1 else 0;

#plot anchorVWAP for intraday 7am
def  volumeSum7 = compoundValue(1, if postAnchorTime7 and endAchorTime then volumeSum7[1] + volume else 0, volume);
def  volumeVwapSum7 = compoundValue(1, if postAnchorTime7 and endAchorTime then volumeVwapSum7[1] + volume * vwap else 0, volume * vwap);
 
plot anchorVWAP7 = if ShowTodayOnly and !Today then Double.NaN else if anchorTime7 then volumeVwapSum7 / volumeSum7 else Double.NaN;
anchorVWAP7.setStyle(Curve.Firm);
anchorVWAP7.setDefaultColor(Color.magenta);
anchorVWAP7.setlineWeight(3);

#AVWAP for 9:30am
def anchorTime9 = 0930;
def postAnchorTime9 = if SecondsFromTime(anchorTime9) >= 0 then 1 else 0;

#plot anchorVWAP for intraday 9:30am
def  volumeSum9 = compoundValue(1, if postAnchorTime9 and endAchorTime then volumeSum9[1] + volume else 0, volume);
def  volumeVwapSum9 = compoundValue(1, if postAnchorTime9 and endAchorTime then volumeVwapSum9[1] + volume * vwap else 0, volume * vwap);
 
plot anchorVWAP9 = if ShowTodayOnly and !Today then Double.NaN else if anchorTime7 then volumeVwapSum9 / volumeSum9 else Double.NaN;
anchorVWAP7.setStyle(Curve.Firm);
anchorVWAP7.setDefaultColor(Color.LIGHT_ORANGE);
anchorVWAP7.setlineWeight(3);


### Add Standard Deviation Bands to the 2am anchorVWAP
def Num_Dev_Dn = -1.0;
defNum_Dev_up = 1.0;

def sDev = stdev(data = close, length = 100);
plot upper = anchorVWAP + (Num_Dev_Up) * sDev;
plot lower = anchorVWAP + (Num_Dev_Dn * sDev);
plot upper2 = anchorVWAP + (Num_Dev_Up + 1) * sDev;
plot upper3 = anchorVWAP + (Num_Dev_Up + 2) * sDev;
plot lower2 = anchorVWAP + (Num_Dev_Dn - 1) * sDev;
plot lower3 = anchorVWAP + (Num_Dev_Dn  - 2) * sDev;

upper.setDefaultColor(Color.cyan);
upper.setlineWeight(1);
lower.setDefaultColor(Color.cyan);
lower.setlineWeight(1);
upper2.setDefaultColor(Color.cyan);
upper2.setlineWeight(1);
lower2.setDefaultColor(Color.cyan);
lower2.setlineWeight(1);
upper3.setDefaultColor(Color.cyan);
upper3.setlineWeight(1);
lower3.setDefaultColor(Color.cyan);
lower3.setlineWeight(1);



### Regression Channel on the Close
def offset = 1;
def widthOfChannel = 100.0;
def fullRange = Yes;
def lengthR = 21;

plot MiddleLR;
if (fullRange)
then {
    MiddleLR = InertiaAll(close[offset]);
} else {
    MiddleLR = InertiaAll(close[offset], lengthR);
}

def dist = HighestAll(AbsValue(MiddleLR - close[offset])) * (widthOfChannel / 100.0);

plot UpperLR = MiddleLR + dist;
plot LowerLR = MiddleLR - dist;

MiddleLR.SetDefaultColor(GetColor(5));
UpperLR.SetDefaultColor(GetColor(5));
LowerLR.SetDefaultColor(GetColor(5));